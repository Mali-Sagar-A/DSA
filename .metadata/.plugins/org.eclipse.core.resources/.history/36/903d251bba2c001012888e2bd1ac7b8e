package Sorting;

public class SortingAlgorithm {

	public void bubble_sort(int arr[])
	{
		
		int i,j,temp;
		
		for(i=arr.length-1;i>=0;i--)
		{
			for(j=0;j<=i-1;j++)
			{
				if(arr[j]>arr[j+1])
				{
					temp=arr[j];
					arr[j]=arr[j+1];
					arr[j+1]=temp;
				}
			}
		}
		
	}
	
	public void Selection_Sort(int arr[])
	{
		int i,j,temp,min;
		
		for(i=0;i<arr.length;i++)
		{
			min=i;
			for(j=i+1;j<arr.length;j++)
			{
				if(arr[j]<arr[min])
				{
					min=j;
				}
			}
			
			if(min!=i)
			{
				temp=arr[i];
				arr[i]=arr[min];
				arr[min]=temp;
			}
			
					
		}
	}
	
	public void Insertion_sort(int arr[])
	{
		int i,j,k;
		
		for(i=1;i<arr.length;i++)
		{
			k=arr[i];
			for(j=i-1;j>=0 && k<arr[j];j--)
			{
				arr[j+1]=arr[j];
			}
			arr[j+1]=k;
		}
	}
	
	public void merge_Version1(int arr[],int arr2[],int res[])
	{
		int i=0;
		int j=0;
		int tar=0;
		
		while((i<arr.length)&&(j<arr2.length))
		{
			if(arr[i]<arr2[j])
			{
				res[tar]=arr[i];
				tar=tar+1;
				i=i+1;
			}
			else if(arr2[j]<arr[i])
			{
				res[tar]=arr2[j];
				tar=tar+1;
				j=j+1;
			}
			else
			{
				res[tar]=arr[i];
				tar=tar+1;
				i=i+1;
				j=j+1;
			}
			
						
			
		}
		while(i<arr.length)
		{
			res[tar]=arr[i];
			tar=tar+1;
			i=i+1;
		}
		while(j<arr2.length)
		{
			res[tar]=arr2[j];
			tar=tar+1;
			j=j+1;
		}

		
	}
	
	public void Merge_version2(int arr1[],int res[],int low1,int high1,int low2,int high2)
	{
		int i,j,tar;
		i=low1;
		j=low2;
		tar=low1;
		
		while((i<=high1)&&(j<=high2))
		{
			if(arr1[i]<arr1[j])
			{
				res[tar]=arr1[i];
				tar=tar+1;
				i=i+1;
			}
			else if(arr1[j]<arr1[i])
			{
				res[tar]=arr1[j];
				tar++;
				j++;
			}
			else
			{
				res[tar]=arr1[i];
				tar++;
				i++;
				j++;
				
			}
		}
		while(i<=high1)
		{
			res[tar]=arr1[i];
			tar++;
			i++;
		}
		while(j<=high2)
		{
			res[tar]=arr1[j];
			tar++;
			j++;
		}
	}
	
	public void copy(int []arr,int []temp,int low,int high)
	{
		int i=low;
		while(i<=high)
		{
			arr[i]=temp[i];
			i++;
		}
	}
	
	public void Merge_Sort_Rec(int arr[],int low,int high)
	{
		int mid;
		int temp[]=new int[arr.length];
		mid =(low+high)/2;
		
		if(low<high)
		{
			mid=(low+high)/2;
			Merge_Sort_Rec(arr,low,mid);
			Merge_Sort_Rec(arr,mid+1,high);
			
			Merge_version2(arr,temp,low,mid,mid+1,high);
			
			copy(arr,temp,low,high);
			
		}
	}
	
	public int Search(int []arr,int key)
	{
		int i;
		for(i=0;i<arr.length;i++)
		{
			if(arr[i]==key)
			{
				return 1;
			}
			
		}
		return -1;
	}
	
	
	public int Binary_Search(int []arr,int key)
	{
		int low=0;
		int high=arr.length-1;
		int mid;
		
		while(low<high)
		{
			mid=(low+high)/2;
			if(arr[mid]==key)
			{
				return mid;
			}
			
			if(key<arr[mid])
			{
				high=mid-1;
			}
			else
			{
				low=mid+1;
			}
			
			if(arr[mid]==key)
			{
				return mid;
			}else
			{
				return -1;
			}
		}
		
//		while(arr[mid]!=key && low<high)
//		{
//			if(key<arr[mid])
//			{
//				high=mid-1;
//			}else
//			{
//				low=mid+1;
//			}
//			mid=(low+high)/2;
//		}
		return -1;
		
		
	}
	
	/********************Quick Sort**********************************/
	
	public int Partition (int arr[],int low,int high)
	{
		int left,right,pivot,t;
		pivot = arr[low];
		left = low;
		right =high;
		
		while(left<=right)
		{
			while((arr[left]<=pivot)&&(left<high))
			{
				left++;
			}
			
			while(arr[right]>pivot)
			{
				right--;
			}
			if(left<right)
			{
				t=arr[left];
				arr[left]=arr[right];;
				arr[right]=t;
				left++;
				right++;
			}else
			{
				left++;
			}
		}
		arr[low]=arr[right];
		arr[right]=pivot;
		
		return right;
	}
	
	public void QuickSort(int arr[],int low,int high)
	{
		int pivloc;
		
		if(low>=high)
		{
			return;
		}
		
		pivloc = Partition(arr,low,high);
		
		QuickSort(arr,low,pivloc-1);
		QuickSort(arr,pivloc+1,high);
	}
	
	
	public void Display(int arr[])
	{
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
	}
}
