package Tree;

import java.util.Scanner;

public class MyBinaryTree {
	
	public static void main(String[] args) {
	Scanner s=new Scanner(System.in);
	
//	System.out.println("Enter Root Node Data..");
//	
//	int data=s.nextInt();
//	
//	TreeNode new_node = new TreeNode(data);
//	BinaryTree bt= new BinaryTree(new_node);
	BinaryTree bt= new BinaryTree();
	BinaryTree bt2= new BinaryTree();
	
	int ch;
	
	do {
		System.out.println("binary Tree Operation");
		
		System.out.println("1.->PreOrder");
		System.out.println("2.->InOrder");
		System.out.println("3.->PostOrder");
		System.out.println("4.->Insert_levelwise");
		System.out.println("5.->Find Hight");
		System.out.println("6.->IsIdentical");
		System.out.println("11.->Display");
		System.out.println("0.->Exit");
		
		System.out.println("Enter Your Choice");
		ch=s.nextInt();
		
		switch(ch)
		{
			case 1:
			{
				System.out.println("------------****--------------------*****-------------");
				System.out.print("PreOrder->> ");
				bt.PreOrder();
				System.out.println("------------****--------------------*****-------------");
				break;
			}
			case 2:
			{
				System.out.println("------------****--------------------*****-------------");
				System.out.print("InOrder->> ");
				bt.InOrder();
				System.out.println("------------****--------------------*****-------------");
				break;
			}
			case 3:
			{
				System.out.println("------------****--------------------*****-------------");
				System.out.print("PostOrder->> ");
				bt.PostOrder();
				System.out.println("------------****--------------------*****-------------");
				break;
			}
			case 4:
			{
				System.out.println("------------****--------------------*****-------------");
				System.out.println("Enter Data..");
				int d=s.nextInt();
				bt.Insert_LevelWise(d);
				System.out.println(d+"inserted..");
				System.out.println("------------****--------------------*****-------------");
				break;
			}
			case 5:
			{
				System.out.println("------------****--------------------*****-------------");
				int ht=bt.Find_Height();
				System.out.println("Binary Tree Hight is -> "+ht);
				System.out.println("------------****--------------------*****-------------");
				break;
			}
			case 6:
			{
				int h;
				System.out.println("------------****--------------------*****-------------");
				do {
					
					System.out.println("Enter Data second binary tree..");
					int d=s.nextInt();
					bt2.Insert_LevelWise(d);
					System.out.println(d+"inserted..\n\n");
					
					
					System.out.println("Enter 1 to continue and 0 to Exit");
					h=s.nextInt();
					
				}while(h!=0);
				boolean res;
				res=bt.isIdentical(bt, bt2);
				
				if(res==true)
				{
					System.out.println("Binary tree is identical");
				}else
				{
					System.out.println("binary tree is not identical");
				}
				System.out.println("------------****--------------------*****-------------");
				break;
			}
			
			case 11:
			{
				System.out.println("------------****--------------------*****-------------");
				bt.Display();
				System.out.println("------------****--------------------*****-------------");
				break;
				
			}
			case 0:
			{
				System.out.println("------------****--------------------*****-------------");
				System.out.println("Thank you");
				System.out.println("------------****--------------------*****-------------");
				break;
			}
			default:
				
			{
				System.out.println("------------****--------------------*****-------------");
				System.out.println("Enter Valid Choice");
				System.out.println("------------****--------------------*****-------------");
			}
		}
	}while(ch!=0);
	
	
	}

}
