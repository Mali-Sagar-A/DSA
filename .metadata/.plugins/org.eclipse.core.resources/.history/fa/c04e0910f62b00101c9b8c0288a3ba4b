package Sorting;

public class SortingAlgorithm {

	public void bubble_sort(int arr[])
	{
		
		int i,j,temp;
		
		for(i=arr.length-1;i>=0;i--)
		{
			for(j=0;j<=i-1;j++)
			{
				if(arr[j]>arr[j+1])
				{
					temp=arr[j];
					arr[j]=arr[j+1];
					arr[j+1]=temp;
				}
			}
		}
		
	}
	
	public void Selection_Sort(int arr[])
	{
		int i,j,temp,min;
		
		for(i=0;i<arr.length;i++)
		{
			min=i;
			for(j=i+1;j<arr.length;j++)
			{
				if(arr[j]<arr[min])
				{
					min=j;
				}
			}
			
			if(min!=i)
			{
				temp=arr[i];
				arr[i]=arr[min];
				arr[min]=temp;
			}
			
					
		}
	}
	
	public void Insertion_sort(int arr[])
	{
		int i,j,k;
		
		for(i=1;i<arr.length;i++)
		{
			k=arr[i];
			for(j=i-1;j>=0 && k<arr[j];j--)
			{
				arr[j+1]=arr[j];
			}
			arr[j+1]=k;
		}
	}
	
	public void merge_Version1(int arr[],int arr2[],int res[])
	{
		int i=0;
		int j=0;
		int tar=0;
		
		while((i<arr.length)&&(j<arr2.length))
		{
			if(arr[i]<arr2[j])
			{
				res[tar]=arr[i];
				tar=tar+1;
				i=i+1;
			}
			else if(arr2[j]<arr[i])
			{
				res[tar]=arr2[j];
				tar=tar+1;
				j=j+1;
			}
			else
			{
				res[tar]=arr[i];
				tar=tar+1;
				i=i+1;
				j=j+1;
			}
			
						
			
		}
		while(i<arr.length)
		{
			res[tar]=arr[i];
			tar=tar+1;
			i=i+1;
		}
		while(j<arr2.length)
		{
			res[tar]=arr2[j];
			tar=tar+1;
			j=j+1;
		}

		
	}
	
	public void Merge_version2(int arr1[],int res[],int low1,int high1,int low2,int high2)
	{
		int i,j,tar;
		i=low1;
		j=low2;
		tar=low1;
		
		while((i<=high1)&&(j<=high2))
		{
			if(arr1[i]<arr1[j])
			{
				res[tar]=arr1[i];
				tar=tar+1;
				i=i+1;
			}
			else if(arr1[j]<arr1[i])
			{
				res[tar]=arr1[j];
				tar++;
				j++;
			}
			else
			{
				res[tar]=arr1[i];
				tar++;
				i++;
				j++;
				
			}
		}
		while(i<high1)
		{
			res[tar]=arr1[i];
			tar++;
			i++;
		}
		while(j<=high2)
		{
			res[tar]=arr[j];
			tar++;
			j++;
		}
	}
	
	public void Display(int arr[])
	{
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
	}
}
